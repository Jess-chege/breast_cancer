#importing the librariesimport numpy as npimport pickle #load the modelimport streamlit as stimport pandas as pdimport requests#Loading model from github# Function to download the model from URL and save it using pickledef download_and_save_model(url):    response = requests.get(url)        if response.status_code == 200:        with open('model.sav', 'wb') as f:            f.write(response.content)        st.write("Model saved as model.sav!")    else:        st.error(f"Error downloading the model: {response.status_code}")# Load the model using pickledef load_model():    try:        with open('model.sav', 'rb') as f:            model = pickle.load(f)  # Load the actual model object        return model    except Exception as e:        st.error(f"Error loading the model: {e}")        return None# URL to your model (make sure the URL points to raw binary content)url = 'https://github.com/Jess-chege/breast_cancer/blob/main/model.sav?raw=true'# Download and save the modeldownload_and_save_model(url)# Load the modelloaded_model = load_model()        #streamlit library  to create a user interfacedef main():        st.title("Breast Cancer Prediction Machine Learning Model")        #getting the input data from user    mean_radius_input = st.text_input("Enter the patients' mean_radius: ")    mean_texture_input = st.text_input("Enter the patients' mean_texture")    mean_perimeter_input= st.text_input("Enter the patients' mean_perimeter")    mean_area_input = st.text_input("Enter the patients' mean_area")    mean_smoothness_input= st.text_input("Enter the patients' mean_smoothness")            #numeric conversions    mean_radius = pd.to_numeric(mean_radius_input, errors='coerce')    mean_texture = pd.to_numeric(mean_texture_input, errors='coerce')    mean_perimeter= pd.to_numeric(mean_perimeter_input, errors='coerce')    mean_area = pd.to_numeric(mean_area_input, errors='coerce')    mean_smoothness= pd.to_numeric(mean_smoothness_input, errors='coerce')       diagnosis = ''        #creating a prediction button    if st.button("PREDICT"):        diagnosis = breast_cancer_prediction([mean_radius,mean_texture,mean_perimeter,mean_area,mean_smoothness])       st.success(diagnosis)    if __name__ =='__main__':    main()                                            